#Doctest for ../101-lazy_matrix_mul.py

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
array([[ 7, 10],
       [15, 22]])

>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
array([[13, 16]])
>>> lazy_matrix_mul('p', [0, 8])
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([0, 8], 9)
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([[]], [[0, 9], [0, 9]])
Traceback (most recent call last):
    ...
ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

>>> lazy_matrix_mul([[9, 0], [0, 9]], [[]])
Traceback (most recent call last):
    ...
ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul([['b', 9]], [[5, 6], [5, 6]])
Traceback (most recent call last):
    ...
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[0, 9]], [[5, 6], [5, 'k']])
Traceback (most recent call last):
    ...
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[0, 9]])
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul()
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> lazy_matrix_mul([[1, 2, 3], [8, 9, 0]], [[1, 2], [0, 9]])
Traceback (most recent call last):
    ...
ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

>>> lazy_matrix_mul([[1, 2, 3], [8, 9, 0]], [[1, 2], [0, 9, 8]])
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 2, 3], [8, 9, 0, 8]], [[1, 2], [0, 9]])
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([0], [9])
0

>>> lazy_matrix_mul([[0]], [9])
array([0])

>>> lazy_matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 8, 2]])
array([[19, 22,  5],
       [43, 50, 11],
       [43, 50, 11]])